rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow all authenticated users to list collections (needed for queries)
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // Users collection
    match /users/{userId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow write access to a user's own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Allow read access to all authenticated users 
      // This makes projects discoverable
      allow read: if request.auth != null;
      
      // Allow creation of projects by any authenticated user
      allow create: if request.auth != null && 
                    request.resource.data.ownerId == request.auth.uid && 
                    request.auth.uid in request.resource.data.members;
      
      // Allow updates if user is a project member or owner
      allow update: if request.auth != null && (
        resource.data.ownerId == request.auth.uid || 
        request.auth.uid in resource.data.members
      );
      
      // Allow deletion only by the owner
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow write access if user is the session creator or a project member
      allow write: if request.auth != null && (
        !exists(/databases/$(database)/documents/sessions/$(sessionId)) || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow creation by any authenticated user
      allow create: if request.auth != null;
      
      // Allow updates if user is the invitee or inviter
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.inviteeId || 
        request.auth.uid == resource.data.inviterId
      );
    }
    
    // PendingUsers collection
    match /pendingUsers/{userId} {
      // Allow read/write by all authenticated users
      allow read, write: if request.auth != null;
    }
  }
}